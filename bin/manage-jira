import csv

import click
import toml
import tqdm
from halo import Halo
from jira import JIRA, JIRAError
from zenpy import Zenpy
from zenpy.lib.api_objects import Link
from zenpy.lib.exception import APIException


def get_jira_sdk(config):
    return JIRA(
        config["jira"]["sdk"]["server"],
        basic_auth=(
            config["jira"]["sdk"]["email"],
            config["jira"]["sdk"]["api_token"],
        ),
    )


def get_zenpy_client(config):
    zenpy_client = Zenpy(**config["zendesk"]["sdk"])
    return zenpy_client


def get_custom_field_id(jira, custom_field_name):
    jira_fields = {field["name"]: field["id"] for field in jira.fields()}
    return jira_fields[custom_field_name]


@click.group()
def cli():
    pass


@cli.command()
@click.option("-d", "--dry-run", default=False, is_flag=True)
@click.option(
    "-u",
    "--users-csv",
    type=click.File(),
    required=True,
    default="./export-users.csv",
)
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def delete_suspended_users(dry_run, users_csv, config):
    config = toml.load(config)
    users_reader = csv.DictReader(users_csv)
    suspended_users = [u for u in users_reader if u["User status"] == "Suspended"]
    click.echo(f"Deleting {len(suspended_users)} suspended users...")
    jira = get_jira_sdk(config)
    if dry_run:
        click.echo("Dry run - exiting...")
        return

    for user in tqdm.tqdm(suspended_users):
        try:
            jira.delete_user(username=f"{user['email']}&accountId={user['User id']}")
        except JIRAError as err:
            click.echo(f"Failed to delete {user['email']}: {err}")


@cli.command()
@click.option("-d", "--dry-run", default=False, is_flag=True)
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def empty_project(dry_run, config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(f"Emptying Jira project '{project}'...")
    jira = get_jira_sdk(config)
    zenpy_client = get_zenpy_client(config)
    spinner = Halo(text="Loading Jira issues...", spinner="dots")
    spinner.start()
    # set maxResults to False to get all issues
    issues = jira.search_issues(f"project='{project}'", maxResults=False)
    num_issues = len(issues)
    spinner.stop()

    if dry_run:
        click.echo(f"Dry run! Would have deleted {num_issues} issues to delete.")
        return

    zd_custom_field_id = get_custom_field_id(jira, "Zendesk Ticket IDs")

    for issue in tqdm.tqdm(issues, total=num_issues):
        zendesk_tickets = getattr(issue.fields, zd_custom_field_id, None)
        if zendesk_tickets:
            for ticket_id in tqdm.tqdm(
                zendesk_tickets.split(","), desc="Zendesk Tickets"
            ):
                try:
                    zenpy_client.jira_links.delete(
                        Link(
                            issue_id=issue.id, issue_key=issue.key, ticket_id=ticket_id
                        )
                    )
                except APIException as exc:
                    click.echo(f" {issue.key} - {exc.response.text}")

        try:
            issue.delete(deleteSubtasks=True)
        except JIRAError:
            click.echo(f"Failed to delete {issue.key}!", err=True)


@cli.command()
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def link_imported_zendesk_tickets(config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(
        f"Getting Jira issues with imported Zendesk tickets from project '{project}'..."
    )
    jira = get_jira_sdk(config)
    zenpy_client = get_zenpy_client(config)
    spinner = Halo(text="Loading Jira issues...", spinner="dots")
    spinner.start()
    zd_custom_field_name = config["jira"]["mappings"]["customfields"]["zendesk_import"][
        "fieldName"
    ]
    # set maxResults to False to get all issues
    issues = jira.search_issues(
        f"project='{project}' AND '{zd_custom_field_name}' IS NOT EMPTY",
        maxResults=False,
    )
    num_issues = len(issues)
    spinner.stop()

    zd_custom_field_id = get_custom_field_id(jira, zd_custom_field_name)

    for issue in tqdm.tqdm(issues, desc="Jira Issues", total=num_issues):
        zendesk_tickets = getattr(issue.fields, zd_custom_field_id).split(",")
        for ticket_id in tqdm.tqdm(zendesk_tickets, desc="Zendesk Tickets"):
            try:
                zenpy_client.jira_links.create(
                    Link(issue_id=issue.id, issue_key=issue.key, ticket_id=ticket_id)
                )
            except APIException as exc:
                click.echo(f" {issue.key} - {exc.response.text}")


if __name__ == "__main__":
    cli()
