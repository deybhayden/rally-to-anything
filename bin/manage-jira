import csv
import re
from urllib.parse import urlparse


import click
import toml
import tqdm
from halo import Halo
from jira import JIRA, JIRAError
from zenpy import Zenpy
from zenpy.lib.api_objects import Link
from zenpy.lib.exception import APIException

from src.jira import JiraMigrator, RallyArtifactTranslator
from src.jira.text import HYPERLINK_RE

NO_DIGIT_RE = re.compile(r"[^\d]+")


def delete_zendesk_jira_links(zenpy_client, issue):
    for link in zenpy_client.jira_links(issue_id=issue.id):
        zenpy_client.jira_links.delete(link)


def get_custom_field_id(jira, custom_field_name):
    jira_fields = {field["name"]: field["id"] for field in jira.fields()}
    return jira_fields[custom_field_name]


def get_jira_issues_with_zendesk_tickets(jira, project, zd_custom_field_name):
    spinner = Halo(text="Loading Jira issues...", spinner="dots")
    spinner.start()
    # set maxResults to False to get all issues
    issues = jira.search_issues(
        f"project='{project}' AND '{zd_custom_field_name}' IS NOT EMPTY",
        maxResults=False,
    )
    spinner.stop()
    return issues


def get_jira_sdk(config):
    return JIRA(
        config["jira"]["sdk"]["server"],
        basic_auth=(
            config["jira"]["sdk"]["email"],
            config["jira"]["sdk"]["api_token"],
        ),
    )


def get_zenpy_client(config):
    zenpy_client = Zenpy(**config["zendesk"]["sdk"])
    return zenpy_client


def get_zendesk_tickets(issue, zd_custom_field_id):
    results = []
    tickets = getattr(issue.fields, zd_custom_field_id).split(",")
    for ticket_id in tickets:
        ticket_id = NO_DIGIT_RE.sub("", ticket_id)
        if ticket_id and ticket_id not in results:
            results.append(ticket_id)
    return results


@click.group()
def cli():
    pass


@cli.command()
@click.option("-d", "--dry-run", default=False, is_flag=True)
@click.option(
    "-u",
    "--users-csv",
    type=click.File(),
    required=True,
    default="./export-users.csv",
)
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def delete_suspended_users(dry_run, users_csv, config):
    config = toml.load(config)
    users_reader = csv.DictReader(users_csv)
    suspended_users = [u for u in users_reader if u["User status"] == "Suspended"]
    click.echo(f"Deleting {len(suspended_users)} suspended users...")
    jira = get_jira_sdk(config)
    if dry_run:
        click.echo("Dry run - exiting...")
        return

    for user in tqdm.tqdm(suspended_users):
        try:
            jira.delete_user(username=f"{user['email']}&accountId={user['User id']}")
        except JIRAError as err:
            click.echo(f"Failed to delete {user['email']}: {err}")


@cli.command()
@click.option("-d", "--dry-run", default=False, is_flag=True)
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def empty_project(dry_run, config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(f"Emptying Jira project '{project}'...")
    jira = get_jira_sdk(config)
    zenpy_client = get_zenpy_client(config)
    spinner = Halo(text="Loading Jira issues...", spinner="dots")
    spinner.start()
    # set maxResults to False to get all issues
    issues = jira.search_issues(f"project='{project}'", maxResults=False)
    num_issues = len(issues)
    spinner.stop()

    if dry_run:
        click.echo(f"Dry run! Would have deleted {num_issues} issues to delete.")
        return

    for issue in tqdm.tqdm(issues, total=num_issues):
        delete_zendesk_jira_links(zenpy_client, issue)

        try:
            issue.delete(deleteSubtasks=True)
        except JIRAError:
            click.echo(f"Failed to delete {issue.key}!", err=True)


@cli.command()
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def link_imported_zendesk_tickets(config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(
        f"Getting Jira issues with imported Zendesk tickets from project '{project}'..."
    )
    jira = get_jira_sdk(config)
    zenpy_client = get_zenpy_client(config)
    zd_custom_field_name = config["jira"]["mappings"]["zendesk_import"]["fieldName"]
    issues = get_jira_issues_with_zendesk_tickets(jira, project, zd_custom_field_name)

    num_issues = len(issues)
    zd_custom_field_id = get_custom_field_id(jira, zd_custom_field_name)

    for issue in tqdm.tqdm(issues, desc="Jira Issues", total=num_issues):
        zendesk_tickets = get_zendesk_tickets(issue, zd_custom_field_id)
        for ticket_id in tqdm.tqdm(zendesk_tickets, desc="Zendesk Tickets"):
            try:
                zenpy_client.jira_links.create(
                    Link(issue_id=issue.id, issue_key=issue.key, ticket_id=ticket_id)
                )
            except APIException as exc:
                click.echo(f" {issue.key} - {exc.response.text}")


@cli.command()
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def remove_zendesk_ticket_links(config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(f"Getting Jira issues with Zendesk tickets from project '{project}'...")
    jira = get_jira_sdk(config)
    zenpy_client = get_zenpy_client(config)
    issues = get_jira_issues_with_zendesk_tickets(jira, project, "Zendesk Ticket IDs")
    num_issues = len(issues)

    for issue in tqdm.tqdm(issues, desc="Jira Issues", total=num_issues):
        delete_zendesk_jira_links(zenpy_client, issue)


@cli.command()
@click.option("-v", "--verbose", default=False, is_flag=True)
@click.option("-l", "--log-file", type=click.File(), required=True)
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def reupload_failed_rally_attachments(verbose, log_file, config):
    config = toml.load(config)
    migrator = JiraMigrator(config, verbose)
    translator = RallyArtifactTranslator(migrator)
    jira = get_jira_sdk(config)

    failed_attachments = []
    for logline in log_file.readlines():
        if "WARN - An exception occurred dealing with attachment" in logline:
            matches = HYPERLINK_RE.findall(logline)
            for match in matches:
                parts = urlparse(match)
                failed_attachments.append(int(parts.path.split("/")[3]))

    click.echo(
        f"Found {len(failed_attachments)} failed attachments for reupload into Jira."
    )

    for artifact in tqdm.tqdm(migrator.rally_artifacts, "Rally Artifacts"):
        for attachment in artifact["attachments"]:
            if attachment["objectId"] in failed_attachments:
                (issue,) = jira.search_issues(
                    f'"External issue ID[Short text]" = "{artifact["formattedId"]}"'
                )
                jira.add_attachment(
                    issue=issue,
                    attachment=translator._get_attachment_filepath(attachment),
                    filename=f"{attachment['name']} - {attachment['objectId']}",
                )


@cli.command()
@click.option("-i1", "--issue-key-one")
@click.option("-i2", "--issue-key-two")
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def compare_jira_issues(issue_key_one, issue_key_two, config):
    config = toml.load(config)
    jira = get_jira_sdk(config)
    issue_one = jira.issue(issue_key_one)
    issue_two = jira.issue(issue_key_two)
    print(issue_one, issue_two)


@cli.command()
@click.option("--config", type=click.File(), required=True, default="./config.toml")
def sync_epic_status_and_status(config):
    config = toml.load(config)
    project = config["jira"]["project"]["key"]
    click.echo(f"Syncing Epic Status & Status of Jira project '{project}'...")
    jira = get_jira_sdk(config)
    spinner = Halo(text="Loading Jira issues...", spinner="dots")
    spinner.start()
    # set maxResults to False to get all issues
    epics = jira.search_issues(
        f"project='{project}' AND issuetype='Epic'", maxResults=False
    )
    num_epics = len(epics)
    spinner.stop()

    epic_status_id = get_custom_field_id(jira, "Epic Status")
    epic_statuses = {
        "Open": {"id": "10000", "name": "To Do"},
        "In Progress": {"id": "10001", "name": "In Progress"},
        "Done": {"id": "10002", "name": "Done"},
        "Won't Do": {"id": "10002", "name": "Done"},
    }

    for epic in tqdm.tqdm(epics, total=num_epics):
        current_epic_status = getattr(epic.fields, epic_status_id)
        new_epic_status = epic_statuses[epic.fields.status.name]
        if current_epic_status.value != new_epic_status["name"]:
            epic.update(fields={epic_status_id: new_epic_status})


if __name__ == "__main__":
    cli()
